name: master

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '1.8', '11' ]
        hadoop: [ 'hadoop-2.7', 'hadoop-3.2' ]
        hive: [ 'hive-1.2', 'hive-2.3' ]
        exclude:
        - java: '11'
          hive: 'hive-1.2'
        - hadoop: 'hadoop-3.2'
          hive: 'hive-1.2'
    name: Build Spark - JDK${{ matrix.java }}/${{ matrix.hadoop }}/${{ matrix.hive }}

    steps:
    - uses: actions/checkout@master
    # We split caches because GitHub Action Cache has a 400MB-size limit.
    - uses: actions/cache@v1
      with:
        path: build
        key: build-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          build-
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository/com
        key: ${{ matrix.java }}-${{ matrix.hadoop }}-maven-com-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ matrix.java }}-${{ matrix.hadoop }}-maven-com-
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository/org
        key: ${{ matrix.java }}-${{ matrix.hadoop }}-maven-org-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ matrix.java }}-${{ matrix.hadoop }}-maven-org-
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository/net
        key: ${{ matrix.java }}-${{ matrix.hadoop }}-maven-net-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ matrix.java }}-${{ matrix.hadoop }}-maven-net-
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository/io
        key: ${{ matrix.java }}-${{ matrix.hadoop }}-maven-io-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ matrix.java }}-${{ matrix.hadoop }}-maven-io-
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: Build with Maven
      run: |
        export MAVEN_OPTS="-Xmx2g -XX:ReservedCodeCacheSize=1g -Dorg.slf4j.simpleLogger.defaultLogLevel=WARN"
        export MAVEN_CLI_OPTS="--no-transfer-progress"
        mkdir -p ~/.m2
        echo "<settings><mirrors><mirror><id>google-maven-central</id><name>GCS Maven Central mirror</name><url>https://maven-central.storage-download.googleapis.com/repos/central/data/</url><mirrorOf>central</mirrorOf></mirror></mirrors></settings>" > ~/.m2/settings.xml
        ./build/mvn $MAVEN_CLI_OPTS -DskipTests -Pyarn -Pmesos -Pkubernetes -Phive -P${{ matrix.hive }} -Phive-thriftserver -P${{ matrix.hadoop }} -Phadoop-cloud -Djava.version=${{ matrix.java }} install
        rm -rf ~/.m2/repository/org/apache/spark


  lint:
    runs-on: ubuntu-latest
    name: Linters (Java/Scala/Python), licenses, dependencies
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-java@v1
      with:
        java-version: '11'
    - uses: actions/setup-python@v1
      with:
        python-version: '3.x'
        architecture: 'x64'
    - name: Scala
      run: ./dev/lint-scala
    - name: Java
      run: ./dev/lint-java
    - name: Python
      run: |
        pip install flake8 sphinx numpy
        ./dev/lint-python
    - name: License
      run: ./dev/check-license
    - name: Dependencies
      run: ./dev/test-dependencies.sh

  lintr:
    runs-on: ubuntu-latest
    name: Linter (R)
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-java@v1
      with:
        java-version: '11'
    - name: install R
      run: |
        echo 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/' | sudo tee -a /etc/apt/sources.list
        curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xE298A3A825C0D65DFD57CBB651716619E084DAB9" | sudo apt-key add
        sudo apt-get update
        sudo apt-get install -y r-base r-base-dev libcurl4-openssl-dev
    - name: install R packages
      run: |
        sudo Rscript -e "install.packages(c('curl', 'xml2', 'httr', 'devtools', 'testthat', 'knitr', 'rmarkdown', 'roxygen2', 'e1071', 'survival'), repos='https://cloud.r-project.org/')"
        sudo Rscript -e "devtools::install_github('jimhester/lintr@v2.0.0')"
    - name: package and install SparkR
      run: ./R/install-dev.sh
    - name: lint-r
      run: ./dev/lint-r
